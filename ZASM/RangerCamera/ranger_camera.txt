// ===============================
//  zCubed's ZCPU "Ranger Camera"
// ===============================

//
// CONSTANTS
//

// RANGER MEMORY is present at the first 64 bytes outside of RAM
#define RANGER_MEM 65536

// PIXEL MEMORY is mapped over by 64 bytes
// On the dupe version of this the screen is on mem2 of the bus
#define PIX_MEM 65600

#define USE_NORMAL_COLORS
#define INVERT_DEPTH_COLOR

#define MAX_RANGE 250000

// TODO: Make this a half-angle
#define ATTEN 0.45

#define WIDTH 128
#define HEIGHT 128

#define USE_INTERLACING

//
// ENTRY POINT
//
CALL _ENTRY
JMP _TRAP


//
// INITIALIZATION ROUTINE
//

_ENTRY:
    // Setup the screen
    // We boot into unpacked RGB, we probably shouldn't use this to be honest
    MOV [PIX_MEM + 1048572], HEIGHT
    MOV [PIX_MEM + 1048573], WIDTH
    MOV [PIX_MEM + 1048569], 1
    
    CALL CLEAR_SCREEN_HW
    CALL TEST_PIXELS
    CALL CLEAR_SCREEN_HW

    // Setup the ranger
    MOV [RANGER_MEM + 2], MAX_RANGE
    
    CALL KMAIN
  
    RET

CLEAR_SCREEN_HW:
    MOV [PIX_MEM + 1048574], 1
    RET

TEST_PIXELS:
    PUSH EAX
    XOR EAX, EAX
    
    TEST_PIXEL_LOOP:
        MOV [PIX_MEM:EAX], 255
        ADD EAX, 4
        CMP EAX,32
        JLE TEST_PIXEL_LOOP
    
    POP EAX        
    RET

//
// PROGRAM BODY
//
KMAIN:
    XOR EAX, EAX
    XOR EBX, EBX
    
    XOR R4, R4
    
    ROW_LOOP:
        CALL TRACE_PIXEL
    
        // Next column
        INC EAX
        CMP EAX, [PIX_MEM + 1048573] 
        JNE ROW_LOOP
        INC EBX

        // Next row
        XOR EAX, EAX
        CMP EBX, [PIX_MEM + 1048572]
        JLE ROW_LOOP

    RET

TRACE_PIXEL:
    //
    // The color info is written to R0-R2!
    //
    
    // GENERATE A UV PATTERN
    MOV ECX, [PIX_MEM + 1048573]
    MOV EDX, [PIX_MEM + 1048572]
    
    DEC ECX
    DEC EDX
    
    MOV R0, EAX
    MOV R1, EBX
    
    DIV R0, ECX
    DIV R1, EDX
    
    // CENTER THE UV
    MUL R0, 2.0
    MUL R1, 2.0
    
    SUB R0, 1.0
    SUB R1, 1.0
    
    MUL R0, ATTEN
    MUL R1, ATTEN

    // TODO: ATTENUATE UV BY FOV
    MOV [RANGER_MEM + 4], R0
    MOV [RANGER_MEM + 5], R1
    MOV [RANGER_MEM], 1
    
    //MOV R0, 0
    //MOV R1, 0
    //MOV R2, 0
    
#ifdef USE_NORMAL_COLORS
    MOV R0, [RANGER_MEM + 7]
    MOV R1, [RANGER_MEM + 8]
    MOV R2, [RANGER_MEM + 9]
    
    ADD R0, 1
    ADD R1, 1
    ADD R2, 1
    
    DIV R0, 2
    DIV R1, 2
    DIV R2, 2
#else
    // FETCH DEPTH AND USE FOR COLOR    
    
    MOV R0, [RANGER_MEM + 1]
    DIV R0, [RANGER_MEM + 2]

#ifdef INVERT_DEPTH_COLOR
    MOV R4, R0
    MOV R0, 1
    SUB R0, R4
#endif

    MOV R1, R0
    MOV R2, R0
    
#endif

    // GET RGB OUTPUTS
    MUL R0, 255
    MUL R1, 255
    MUL R2, 255
    
    CALL BLIT_PIXEL

    RET
    
BLIT_PIXEL:
    // Calculate pixel index
    // First the row
    MOV ECX, EBX
    MUL ECX, [PIX_MEM + 1048573]
    MUL ECX, 3
    
    // Then the column
    MOV EDX, EAX
    MUL EDX, 3
    ADD ECX, EDX
    
    // Write RGB
    MOV [PIX_MEM:ECX], R0
    INC ECX
    MOV [PIX_MEM:ECX], R1
    INC ECX
    MOV [PIX_MEM:ECX], R2
    
    RET

// TRAP
_TRAP:
    CALL KMAIN
    JMP _TRAP
    INT 1
